{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/collection_tests.js","filenameRelative":"/packages/mongo/collection_tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/collection_tests.js.map","sourceFileName":"/packages/mongo/collection_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"collection_tests"},"ignored":false,"code":"var _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nTinytest.add('collection - call Mongo.Collection without new', function (test) {\n  test.throws(function () {\n    Mongo.Collection(null);\n  }, /use \"new\" to construct a Mongo\\.Collection/);\n});\n\nTinytest.add('collection - call new Mongo.Collection multiple times', function (test) {\n  var collectionName = 'multiple_times_1_' + test.id;\n  new Mongo.Collection(collectionName);\n\n  test.throws(function () {\n    new Mongo.Collection(collectionName);\n  }, /There is already a collection named/);\n});\n\nTinytest.add('collection - call new Mongo.Collection multiple times with _suppressSameNameError=true', function (test) {\n  var collectionName = 'multiple_times_2_' + test.id;\n  new Mongo.Collection(collectionName);\n\n  try {\n    new Mongo.Collection(collectionName, { _suppressSameNameError: true });\n    test.ok();\n  } catch (error) {\n    console.log(error);\n    test.fail('Expected new Mongo.Collection not to throw an error when called twice with the same name');\n  }\n});\n\nTinytest.add('collection - call new Mongo.Collection with defineMutationMethods=false', function (test) {\n  var handlerPropName = Meteor.isClient ? '_methodHandlers' : 'method_handlers';\n\n  var methodCollectionName = 'hasmethods' + test.id;\n  var hasmethods = new Mongo.Collection(methodCollectionName);\n  test.equal((0, _typeof3['default'])(hasmethods._connection[handlerPropName]['/' + methodCollectionName + '/insert']), 'function');\n\n  var noMethodCollectionName = 'nomethods' + test.id;\n  var nomethods = new Mongo.Collection(noMethodCollectionName, { defineMutationMethods: false });\n  test.equal(nomethods._connection[handlerPropName]['/' + noMethodCollectionName + '/insert'], undefined);\n});","ast":null,"map":{"version":3,"sources":["/packages/mongo/collection_tests.js"],"names":[],"mappings":";;;;;;AAAA,SAAS,GAAT,CACE,gDADF,EAEE,UAAU,IAAV,EAAgB;AACd,OAAK,MAAL,CACE,YAAY;AACV,UAAM,UAAN,CAAiB,IAAjB;AACD,GAHH,EAIE,4CAJF;AAMD,CATH;;AAYA,SAAS,GAAT,CAAa,uDAAb,EACE,UAAU,IAAV,EAAgB;AACd,MAAI,iBAAiB,sBAAsB,KAAK,EAAhD;AACA,MAAI,MAAM,UAAV,CAAqB,cAArB;;AAEA,OAAK,MAAL,CACE,YAAY;AACV,QAAI,MAAM,UAAV,CAAqB,cAArB;AACD,GAHH,EAIE,qCAJF;AAMD,CAXH;;AAcA,SAAS,GAAT,CAAa,wFAAb,EACE,UAAU,IAAV,EAAgB;AACd,MAAI,iBAAiB,sBAAsB,KAAK,EAAhD;AACA,MAAI,MAAM,UAAV,CAAqB,cAArB;;AAEA,MAAI;AACF,QAAI,MAAM,UAAV,CAAqB,cAArB,EAAqC,EAAC,wBAAwB,IAAzB,EAArC;AACA,SAAK,EAAL;AACD,GAHD,CAGE,OAAO,KAAP,EAAc;AACd,YAAQ,GAAR,CAAY,KAAZ;AACA,SAAK,IAAL,CAAU,0FAAV;AACD;AACF,CAZH;;AAeA,SAAS,GAAT,CAAa,yEAAb,EACE,UAAU,IAAV,EAAgB;AACd,MAAI,kBAAkB,OAAO,QAAP,GAAkB,iBAAlB,GAAsC,iBAA5D;;AAEA,MAAI,uBAAuB,eAAe,KAAK,EAA/C;AACA,MAAI,aAAa,IAAI,MAAM,UAAV,CAAqB,oBAArB,CAAjB;AACA,OAAK,KAAL,0BAAkB,WAAW,WAAX,CAAuB,eAAvB,EAAwC,MAAM,oBAAN,GAA6B,SAArE,CAAlB,GAAmG,UAAnG;;AAEA,MAAI,yBAAyB,cAAc,KAAK,EAAhD;AACA,MAAI,YAAY,IAAI,MAAM,UAAV,CAAqB,sBAArB,EAA6C,EAAC,uBAAuB,KAAxB,EAA7C,CAAhB;AACA,OAAK,KAAL,CAAW,UAAU,WAAV,CAAsB,eAAtB,EAAuC,MAAM,sBAAN,GAA+B,SAAtE,CAAX,EAA6F,SAA7F;AACD,CAXH","file":"/packages/mongo/collection_tests.js.map","sourcesContent":["Tinytest.add(\n  'collection - call Mongo.Collection without new',\n  function (test) {\n    test.throws(\n      function () {\n        Mongo.Collection(null);\n      },\n      /use \"new\" to construct a Mongo\\.Collection/\n    );\n  }\n);\n\nTinytest.add('collection - call new Mongo.Collection multiple times',\n  function (test) {\n    var collectionName = 'multiple_times_1_' + test.id;\n    new Mongo.Collection(collectionName);\n\n    test.throws(\n      function () {\n        new Mongo.Collection(collectionName);\n      },\n      /There is already a collection named/\n    );\n  }\n);\n\nTinytest.add('collection - call new Mongo.Collection multiple times with _suppressSameNameError=true',\n  function (test) {\n    var collectionName = 'multiple_times_2_' + test.id;\n    new Mongo.Collection(collectionName);\n\n    try {\n      new Mongo.Collection(collectionName, {_suppressSameNameError: true});\n      test.ok();\n    } catch (error) {\n      console.log(error);\n      test.fail('Expected new Mongo.Collection not to throw an error when called twice with the same name');\n    }\n  }\n);\n\nTinytest.add('collection - call new Mongo.Collection with defineMutationMethods=false',\n  function (test) {\n    var handlerPropName = Meteor.isClient ? '_methodHandlers' : 'method_handlers';\n\n    var methodCollectionName = 'hasmethods' + test.id;\n    var hasmethods = new Mongo.Collection(methodCollectionName);\n    test.equal(typeof hasmethods._connection[handlerPropName]['/' + methodCollectionName + '/insert'], 'function');\n\n    var noMethodCollectionName = 'nomethods' + test.id;\n    var nomethods = new Mongo.Collection(noMethodCollectionName, {defineMutationMethods: false});\n    test.equal(nomethods._connection[handlerPropName]['/' + noMethodCollectionName + '/insert'], undefined);\n  }\n);\n"]},"hash":"d95302b3984ed85fd81f1bf98a6ef8883de0f088"}
