{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"./Tracker","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Tracker"}]}],"exports":{"exported":["TrackerReactMixin"],"specifiers":[{"kind":"local","local":"TrackerReactMixin","exported":"TrackerReactMixin"}]}}},"options":{"filename":"/packages/ultimatejs:tracker-react/main.js","filenameRelative":"/packages/ultimatejs:tracker-react/main.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/ultimatejs:tracker-react/main.js.map","sourceFileName":"/packages/ultimatejs:tracker-react/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"main"},"ignored":false,"code":"exports.__esModule = true;\nexports.TrackerReactMixin = undefined;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _Tracker = require('./Tracker');\n\nvar _Tracker2 = _interopRequireDefault(_Tracker);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * autorunRender(): The magic behind this computation is it only ever runs once after each time `render` is called.\n * When it does run that 2nd time, it's used just to force an update. The reactive function it wraps isn't even called.\n * Then on the update, the cycle repeats, and the computation is stopped, and a new one is made.\n *\n * Also, because the autorun is recreated on all React-triggered re-renders, any new code-paths possibly\n * taken in `render` will automatically begin tracking reactive dependencies, thereby MERGING both models of reactivity:\n * Meteor's various reactive data sources AND React's functional + unidirectional re-running of\n * everything in component branches with state changes.\n */\n\n/**\n * Default. Provides a react component for inheritance as a clean alternative to mixins.\n * Implementation:\n *    \"class MyApp extends TrackerReact(React.Component) { (...)\"\n * @param Component {*} React Component\n */\n\nexports['default'] = TrackerReact = function TrackerReact(Component, opt) {\n  // No reactive computations needed for Server Side Rendering\n  if (Meteor.isServer) return Component;\n\n  var TrackerReactComponent = function (_Component) {\n    (0, _inherits3['default'])(TrackerReactComponent, _Component);\n\n    function TrackerReactComponent() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      (0, _classCallCheck3['default'])(this, TrackerReactComponent);\n\n\n      /*\n       Overloading the constructors `componentWillUnmount` method to ensure that computations are stopped and a\n       forceUpdate prevented, without overwriting the prototype. This is a potential bug, as of React 14.7 the\n       componentWillUnmount() method does not fire, if the top level component has one. It gets overwritten. This\n       implementation is however similar to what a transpiler would do anyway.\n        GitHub Issue: https://github.com/facebook/react/issues/6162\n       */\n\n      var _this = (0, _possibleConstructorReturn3['default'])(this, _Component.call.apply(_Component, [this].concat(args)));\n\n      if (!_this.constructor.prototype._isExtended) {\n        (function () {\n          _this.constructor.prototype._isExtended = true;\n          var superComponentWillUnmount = _this.constructor.prototype.componentWillUnmount;\n\n          _this.constructor.prototype.componentWillUnmount = function () {\n            if (superComponentWillUnmount) {\n              for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = arguments[_key2];\n              }\n\n              superComponentWillUnmount.call.apply(superComponentWillUnmount, [this].concat(args));\n            }\n\n            this._renderComputation.stop();\n            this._renderComputation = null;\n          };\n        })();\n      }\n\n      _this.autorunRender();\n      return _this;\n    }\n\n    TrackerReactComponent.prototype.autorunRender = function autorunRender() {\n      var _this2 = this;\n\n      var oldRender = this.render;\n\n      this.render = function () {\n        // Simple method we can offer in the `Meteor.Component` API\n        return _this2.autorunOnce('_renderComputation', oldRender);\n      };\n    };\n\n    TrackerReactComponent.prototype.autorunOnce = function autorunOnce(name, dataFunc) {\n      return _Tracker2['default'].once(name, this, dataFunc, this.forceUpdate);\n    };\n\n    return TrackerReactComponent;\n  }(Component);\n\n  return TrackerReactComponent;\n};\n\n/**\n * Mixin. Use with ES7 / TypeScript Decorator or Mixin-Module.\n * Implementation:\n *   \"@TrackerReactMixin\n *    class MyApp extends React.Component { (...)\"\n * @type {{componentWillMount: (function()), componentWillUnmount: (function()), autorunRender: (function()),\n *   autorunOnce: (function(*=, *=))}}\n */\n/**\n * Tracker is available as a global variable but is extended for one time computations/invalidation.\n * Implementation: See ./Tracker.js\n */\n\n\nvar TrackerReactMixin = exports.TrackerReactMixin = {\n  componentWillMount: function componentWillMount() {\n    // No reactive computations needed for Server Side Rendering\n    if (Meteor.isServer) return;\n\n    this.autorunRender();\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    // No reactive computations needed for Server Side Rendering\n    if (Meteor.isServer) return;\n\n    this._renderComputation.stop();\n    this._renderComputation = null;\n  },\n  autorunRender: function autorunRender() {\n    var _this3 = this;\n\n    var oldRender = this.render;\n\n    this.render = function () {\n      // Simple method we can offer in the `Meteor.Component` API\n      return _this3.autorunOnce('_renderComputation', oldRender);\n    };\n  },\n  autorunOnce: function autorunOnce(name, dataFunc) {\n    return _Tracker2['default'].once(name, this, dataFunc, this.forceUpdate);\n  }\n};","ast":null,"map":{"version":3,"sources":["/packages/ultimatejs:tracker-react/main.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;qBAoBe,eAAe,sBAAU,SAAV,EAAqB,GAArB,EAA0B;;AAEtD,MAAI,OAAO,QAAX,EAAqB,OAAO,SAAP;;AAFiC,MAIhD,qBAJgD;AAAA;;AAMpD,qCAAqB;AAAA,wCAAN,IAAM;AAAN,YAAM;AAAA;;AAAA;;;;;;;;;;;AAAA,oEACnB,gDAAS,IAAT,EADmB;;AAWnB,UAAI,CAAC,MAAK,WAAL,CAAiB,SAAjB,CAA2B,WAAhC,EAA6C;AAAA;AAC3C,gBAAK,WAAL,CAAiB,SAAjB,CAA2B,WAA3B,GAAyC,IAAzC;AACA,cAAI,4BAA4B,MAAK,WAAL,CAAiB,SAAjB,CAA2B,oBAA3D;;AAEA,gBAAK,WAAL,CAAiB,SAAjB,CAA2B,oBAA3B,GAAkD,YAAmB;AACnE,gBAAI,yBAAJ,EAA+B;AAAA,iDAD8B,IAC9B;AAD8B,oBAC9B;AAAA;;AAC7B,wCAA0B,IAA1B,mCAA+B,IAA/B,SAAwC,IAAxC;AACD;;AAED,iBAAK,kBAAL,CAAwB,IAAxB;AACA,iBAAK,kBAAL,GAA0B,IAA1B;AACD,WAPD;AAJ2C;AAY5C;;AAED,YAAK,aAAL;AAzBmB;AA0BpB;;AAhCmD,oCAkCpD,aAlCoD,4BAkCpC;AAAA;;AACd,UAAI,YAAY,KAAK,MAArB;;AAEA,WAAK,MAAL,GAAc,YAAM;;AAElB,eAAO,OAAK,WAAL,CAAiB,oBAAjB,EAAuC,SAAvC,CAAP;AACD,OAHD;AAID,KAzCmD;;AAAA,oCA2CpD,WA3CoD,wBA2CxC,IA3CwC,EA2ClC,QA3CkC,EA2CxB;AAC1B,aAAO,qBAAQ,IAAR,CAAa,IAAb,EAAmB,IAAnB,EAAyB,QAAzB,EAAmC,KAAK,WAAxC,CAAP;AACD,KA7CmD;;AAAA;AAAA,IAIlB,SAJkB;;AAgDtD,SAAO,qBAAP;AACD,C;;;;;;;;;;;;;;;;AAWM,IAAM,gDAAoB;AAC/B,oBAD+B,gCACV;;AAEnB,QAAI,OAAO,QAAX,EAAqB;;AAErB,SAAK,aAAL;AACD,GAN8B;AAO/B,sBAP+B,kCAOR;;AAErB,QAAI,OAAO,QAAX,EAAqB;;AAErB,SAAK,kBAAL,CAAwB,IAAxB;AACA,SAAK,kBAAL,GAA0B,IAA1B;AACD,GAb8B;AAc/B,eAd+B,2BAcf;AAAA;;AACd,QAAI,YAAY,KAAK,MAArB;;AAEA,SAAK,MAAL,GAAc,YAAM;;AAElB,aAAO,OAAK,WAAL,CAAiB,oBAAjB,EAAuC,SAAvC,CAAP;AACD,KAHD;AAID,GArB8B;AAsB/B,aAtB+B,uBAsBnB,IAtBmB,EAsBb,QAtBa,EAsBH;AAC1B,WAAO,qBAAQ,IAAR,CAAa,IAAb,EAAmB,IAAnB,EAAyB,QAAzB,EAAmC,KAAK,WAAxC,CAAP;AACD;AAxB8B,CAA1B","file":"/packages/ultimatejs:tracker-react/main.js.map","sourcesContent":["/**\n * Tracker is available as a global variable but is extended for one time computations/invalidation.\n * Implementation: See ./Tracker.js\n */\nimport Tracker from './Tracker';\n\n/**\n * autorunRender(): The magic behind this computation is it only ever runs once after each time `render` is called.\n * When it does run that 2nd time, it's used just to force an update. The reactive function it wraps isn't even called.\n * Then on the update, the cycle repeats, and the computation is stopped, and a new one is made.\n *\n * Also, because the autorun is recreated on all React-triggered re-renders, any new code-paths possibly\n * taken in `render` will automatically begin tracking reactive dependencies, thereby MERGING both models of reactivity:\n * Meteor's various reactive data sources AND React's functional + unidirectional re-running of\n * everything in component branches with state changes.\n */\n\n\n/**\n * Default. Provides a react component for inheritance as a clean alternative to mixins.\n * Implementation:\n *    \"class MyApp extends TrackerReact(React.Component) { (...)\"\n * @param Component {*} React Component\n */\nexport default TrackerReact = function (Component, opt) {\n  // No reactive computations needed for Server Side Rendering\n  if (Meteor.isServer) return Component;\n\n  class TrackerReactComponent extends Component {\n\n    constructor(...args) {\n      super(...args);\n\n      /*\n       Overloading the constructors `componentWillUnmount` method to ensure that computations are stopped and a\n       forceUpdate prevented, without overwriting the prototype. This is a potential bug, as of React 14.7 the\n       componentWillUnmount() method does not fire, if the top level component has one. It gets overwritten. This\n       implementation is however similar to what a transpiler would do anyway.\n\n       GitHub Issue: https://github.com/facebook/react/issues/6162\n       */\n      if (!this.constructor.prototype._isExtended) {\n        this.constructor.prototype._isExtended = true;\n        let superComponentWillUnmount = this.constructor.prototype.componentWillUnmount;\n\n        this.constructor.prototype.componentWillUnmount = function (...args) {\n          if (superComponentWillUnmount) {\n            superComponentWillUnmount.call(this, ...args);\n          }\n\n          this._renderComputation.stop();\n          this._renderComputation = null;\n        };\n      }\n\n      this.autorunRender();\n    }\n\n    autorunRender() {\n      let oldRender = this.render;\n\n      this.render = () => {\n        // Simple method we can offer in the `Meteor.Component` API\n        return this.autorunOnce('_renderComputation', oldRender);\n      };\n    }\n\n    autorunOnce(name, dataFunc) {\n      return Tracker.once(name, this, dataFunc, this.forceUpdate);\n    }\n  }\n\n  return TrackerReactComponent;\n};\n\n\n/**\n * Mixin. Use with ES7 / TypeScript Decorator or Mixin-Module.\n * Implementation:\n *   \"@TrackerReactMixin\n *    class MyApp extends React.Component { (...)\"\n * @type {{componentWillMount: (function()), componentWillUnmount: (function()), autorunRender: (function()),\n *   autorunOnce: (function(*=, *=))}}\n */\nexport const TrackerReactMixin = {\n  componentWillMount() {\n    // No reactive computations needed for Server Side Rendering\n    if (Meteor.isServer) return;\n\n    this.autorunRender();\n  },\n  componentWillUnmount() {\n    // No reactive computations needed for Server Side Rendering\n    if (Meteor.isServer) return;\n\n    this._renderComputation.stop();\n    this._renderComputation = null;\n  },\n  autorunRender() {\n    let oldRender = this.render;\n\n    this.render = () => {\n      // Simple method we can offer in the `Meteor.Component` API\n      return this.autorunOnce('_renderComputation', oldRender);\n    };\n  },\n  autorunOnce(name, dataFunc) {\n    return Tracker.once(name, this, dataFunc, this.forceUpdate);\n  }\n};\n"]},"hash":"2a37238677a9d5cba4ecfb19de00e9cece4d4c6c"}
